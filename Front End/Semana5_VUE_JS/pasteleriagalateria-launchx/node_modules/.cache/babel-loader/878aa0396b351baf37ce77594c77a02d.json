{"ast":null,"code":"export default {\n  //nombre del componente\n  name: \"productView\",\n  data: function data() {\n    return {\n      //aqui se almacenan las variables de los input respecto a los productos\n      value: '',\n      //Aqui se almacenan las variables de los input con los datos del cliente, luego se envia al store.state dentro de la variable cart\n      info: {\n        nombre: '',\n        tel: '',\n        correo: ''\n      },\n      //aqui se almacena cada producto agregado al carrito, y luego se envia al store.state dentro de la variable cart\n      pedido: []\n    };\n  },\n  computed: {\n    //llama a los datos en store.state. \n    //Produtos muestra los datos de todos los productos a la venta\n    Productos: function Productos() {\n      return this.$store.state.Productos;\n    },\n    //Cart regresa la informacion del pedido ya una vez enviada al store\n    Cart: function Cart() {\n      return this.$store.state.cart;\n    }\n  },\n  methods: {\n    //Esta funcion agrega el producto seleccionado a la variable pedido\n    agregarPedido: function agregarPedido() {\n      var data = {\n        //la variable value con la info del producto agregado lo mete dentro de esta nueva variable\n        value: this.value\n      }; //mete la variable anterior a la variable de pedido, para recopilar todos los productos agregados\n\n      this.pedido.push(data); //limpia la variable value con el producto agregado, para poder meter ahi el nuevo producto a agregar al carro\n\n      this.value = '';\n    }\n  }\n};","map":{"version":3,"mappings":"AA6GA,eAAe;AACX;AACAA,MAAI,EAAC,aAFM;AAGXC,MAHW,kBAGL;AACF,WAAM;AAEF;AACAC,WAAK,EAAC,EAHJ;AAIF;AACAC,UAAI,EAAC;AAACC,cAAM,EAAC,EAAR;AAAYC,WAAG,EAAC,EAAhB;AAAoBC,cAAM,EAAC;AAA3B,OALH;AAOF;AACAC,YAAM,EAAC;AARL,KAAN;AAUH,GAdU;AAgBXC,UAAQ,EAAC;AACL;AACA;AACAC,aAHK,uBAGM;AAAC,aAAO,KAAKC,MAAL,CAAYC,KAAZ,CAAkBF,SAAzB;AAAmC,KAH1C;AAIL;AACAG,QALK,kBAKC;AAAC,aAAO,KAAKF,MAAL,CAAYC,KAAZ,CAAkBE,IAAzB;AAA8B;AALhC,GAhBE;AAuBXC,SAAO,EAAC;AACJ;AACAC,iBAFI,2BAEW;AACX,UAAId,IAAI,GAAE;AACV;AACAC,aAAK,EAAC,KAAKA;AAFD,OAAV,CADW,CAMX;;AACA,WAAKK,MAAL,CAAYS,IAAZ,CAAiBf,IAAjB,EAPW,CAQX;;AACA,WAAKC,KAAL,GAAW,EAAX;AACH;AAZG;AAvBG,CAAf","names":["name","data","value","info","nombre","tel","correo","pedido","computed","Productos","$store","state","Cart","cart","methods","agregarPedido","push"],"sourceRoot":"","sources":["/Users/ricardovb/Documents/CursoMicrosoftFullStack/MicrosoftFullStack_LaunchX/Front End/Semana5_VUE_JS/pasteleriagalateria-launchx/src/components/productView.vue"],"sourcesContent":["<template>\r\n<!--Este componente muestra todos los productos de la tienda, permite agregarlo a un carrito, te muestra la info y envia los datos\r\na store.state-->\r\n    <!--Container de todo-->\r\n    <div class=\"allemos\">\r\n        <!--Aqui se muestra la informacion de los productos agregados al carrito, siempre y cuando haya algo agregado-->\r\n        <div class=\"cart\" v-if=\"pedido[0]\">\r\n            <h3>Carrito de compras</h3>\r\n\r\n            <ol v-if=\"!Cart.cliente\">\r\n                <!--Se repite para cada producto agregado. \r\n                Muestra la info seleccionada. Los productos se almacenan en la variable pedido, que solo trabaja localmente-->\r\n                <!--pedido aqui no tiene que ver con la variable del formulario-->\r\n                <li v-for=\"producto in pedido\" >\r\n                    {{producto.value.categoria}} {{producto.value.tamaño}} de {{producto.value.sabor}} =${{producto.value.precio}}</li>\r\n                \r\n            </ol>\r\n            <!--Aqui se muestran los datos del cliente solo cuando ya se hayan rellenado los inputs-->\r\n            <div v-if=\"!Cart.cliente\">\r\n                <span v-if=\"info.nombre\">Nombre: {{info.nombre}}</span><br>\r\n                <span v-if=\"info.tel\">Teléfono: {{info.tel}}</span><br>\r\n                <span v-if=\"info.correo\">Email: {{info.correo}}</span>\r\n            </div>\r\n            \r\n            <!--Solo aparece si ya fue enviada una orden-->\r\n            <span v-if=\"Cart.cliente\">Su pedido ya fue enviado, si lo desea, puede pulsar aquí para</span>\r\n\r\n            <!--Este form posee los inputs de los datos del usuario\r\n            Una vez enviado el boton submit, envia todos los datos del pedido y usuario en la variable Cart al store.state\r\n            mediante la funcion agregarCart que esta en store.mutations-->\r\n            <form @submit.prevent=\"agregarDato\">\r\n                <div class=\"forms\">\r\n                    <!--Inputs con datos de cliente-->\r\n                    <span v-if=\"!Cart.cliente.nombre\">Nombre: <input type=\"text\" id=\"nombre\" name=\"nombre\" placeholder=\"Nombre Apellido\" v-model=\"info.nombre\" required><br></span>\r\n                    <span v-if=\"!Cart.cliente.nombre\">Telefono <input type=\"number\" id=\"tel\" name=\"tel\" placeholder=\"Celular\" v-model=\"info.tel\" required><br></span>\r\n                    <span v-if=\"!Cart.cliente.nombre\">Correo <input type=\"email\" id=\"correo\" name=\"correo\" placeholder=\"E-mail\" v-model=\"info.correo\" required></span>\r\n                </div >\r\n                \r\n                \r\n                <span >\r\n\r\n                    <!--El boton de enviar envio aparece solo si ya se rellenaron los datos del cliente y no hay datos del cliente en store.state.cart.cliente-->\r\n                        <span v-if=\"info.correo\">\r\n                            <span v-if=\"info.tel\">\r\n                                <span v-if=\"info.nombre\">\r\n                                    \r\n                                    <!--llama a la funcion agregarCart en store.mutations, y envia el pedido y la info del cliente-->\r\n                                    <button type=\"submit\" v-if=\"!Cart.cliente\"  @click=\"$store.commit('agregarCart',{info,pedido})\" onclick=\"alert('Su orden fue enviada. Espere su confirmación en su correo');\">Mandar datos</button>\r\n                                </span>\r\n                            </span>\r\n                        </span>\r\n                    \r\n                    <!--Cuando ya se haya enviado el pedido y este almacenado en la variable Cart en store.state, entonces aparece esta opcion-->\r\n                    <!--Recarga la pagina para borrar el carro y poder enviar otro-->\r\n                    <!--A diferencia del formulario, aqui solo se puede enviar un pedido y ya-->\r\n                    <span  v-if=\"Cart.cliente.nombre\"><input type=\"button\" value=\"Hacer nuevo pedido\" onclick=\"location.reload()\"/></span>\r\n                </span>\r\n            </form>\r\n            \r\n            \r\n            \r\n        </div>\r\n        <!--Aqui se muestran todos los productos-->\r\n        <!--Crea un container para cada categoria de productos-->\r\n        <!--Se repite por el ciclo v-for-->\r\n        <div class=\"mostrador\" v-for=\"Category in Productos\" >\r\n\r\n            <!--Cada categoria de producto tiene un estado booleano en store.state\r\n            Si es true, aparece en la pagina. Si es false, no aparece\r\n            En el index de store se explica mejor-->\r\n            <div class=\"alle\" v-if=\"Category.Estado\" >\r\n                <div  class=\"indarreng\">\r\n\r\n                    <!--COntenedor con la info de cada sabor de cada categoria de producto-->\r\n                    <!--Se repite para cada sabor por el ciclo v-for-->\r\n                    <div class=\"card\" v-for='sabor in Category.Sabores'>\r\n\r\n                        <!--Muestra la imagen del producto. La src esta almacenada en el store.state-->\r\n                        <img :src=\"sabor.src\">\r\n\r\n                        <div class=\"info\">\r\n                            <!--Muestra la categoria y sabor-->\r\n                            <span>{{sabor.category}} de {{sabor.sabor}} </span>\r\n\r\n                            <!--Es la form del pedido. Al darle al boton de submit, llama la funcion \"agregaPedido\" que esta en\r\n                            la parte de script. Ahi si explica mas-->\r\n                            <form @submit.prevent=\"agregarPedido\">\r\n                                <span>\r\n\r\n                                    <!--Input del tamaño del producto. Muestra el precio de cada producto dependiendo el sabor escogido-->\r\n                                    <!--El tamaño seleccionado se almacena en v-model=\"(producto)\"-->\r\n                                    <select id=\"producto\" v-model=\"(value)\">\r\n                                        <option :value=\"{categoria:sabor.category,sabor:sabor.sabor,tamaño:index,precio:dinero}\" v-for=\"(dinero,index) in sabor.precio\">{{index}}<span> ${{dinero}}</span></option>\r\n                                    </select>\r\n                                    <!--Submit del form-->\r\n                                    <button type=\"submit\">Agregar</button>\r\n                                </span>\r\n                            </form>\r\n                        </div>\r\n                     </div>   \r\n                </div>\r\n            </div>\r\n        \r\n        </div >\r\n    </div>\r\n    \r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    //nombre del componente\r\n    name:\"productView\",\r\n    data(){\r\n        return{\r\n\r\n            //aqui se almacenan las variables de los input respecto a los productos\r\n            value:'',\r\n            //Aqui se almacenan las variables de los input con los datos del cliente, luego se envia al store.state dentro de la variable cart\r\n            info:{nombre:'', tel:'', correo:''},\r\n            \r\n            //aqui se almacena cada producto agregado al carrito, y luego se envia al store.state dentro de la variable cart\r\n            pedido:[],\r\n        }   \r\n    },\r\n    \r\n    computed:{\r\n        //llama a los datos en store.state. \r\n        //Produtos muestra los datos de todos los productos a la venta\r\n        Productos(){return this.$store.state.Productos},\r\n        //Cart regresa la informacion del pedido ya una vez enviada al store\r\n        Cart(){return this.$store.state.cart},\r\n    },\r\n    methods:{\r\n        //Esta funcion agrega el producto seleccionado a la variable pedido\r\n        agregarPedido(){\r\n            var data= {\r\n            //la variable value con la info del producto agregado lo mete dentro de esta nueva variable\r\n            value:this.value,\r\n\r\n            };\r\n            //mete la variable anterior a la variable de pedido, para recopilar todos los productos agregados\r\n            this.pedido.push(data);\r\n            //limpia la variable value con el producto agregado, para poder meter ahi el nuevo producto a agregar al carro\r\n            this.value='';\r\n        },\r\n        \r\n        \r\n        \r\n\r\n    },\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.allemos{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n.cart{\r\n    width: 50%;\r\n    background: #FFBCBC;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border-radius: 0px 0px 15px 15px;\r\n\r\n}\r\n.cart button{\r\n    width: 200px;\r\n}\r\n.mostrador{\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n}\r\n.alle{\r\n    width: 93%;\r\n    background: rgba(00, 00, 00, .3);\r\n    margin: 10px;\r\n    border-radius: 20px;\r\n    border: 3px solid black;\r\n}\r\n.indarreng{\r\n    width:100%;\r\n    display: flex;\r\n    flex-wrap: wrap ;\r\n    justify-content: center;\r\n}\r\n.card{\r\n    width: 200px;\r\n    height: 200px;\r\n    background-color: #A9D585;\r\n\r\n    color: white;\r\n\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    border-radius: 10px;\r\n    margin: 10px;\r\n\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='80' height='105' viewBox='0 0 80 105'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='death-star' fill='%23000000' fill-opacity='0.04'%3E%3Cpath d='M20 10a5 5 0 0 1 10 0v50a5 5 0 0 1-10 0V10zm15 35a5 5 0 0 1 10 0v50a5 5 0 0 1-10 0V45zM20 75a5 5 0 0 1 10 0v20a5 5 0 0 1-10 0V75zm30-65a5 5 0 0 1 10 0v50a5 5 0 0 1-10 0V10zm0 65a5 5 0 0 1 10 0v20a5 5 0 0 1-10 0V75zM35 10a5 5 0 0 1 10 0v20a5 5 0 0 1-10 0V10zM5 45a5 5 0 0 1 10 0v50a5 5 0 0 1-10 0V45zm0-35a5 5 0 0 1 10 0v20a5 5 0 0 1-10 0V10zm60 35a5 5 0 0 1 10 0v50a5 5 0 0 1-10 0V45zm0-35a5 5 0 0 1 10 0v20a5 5 0 0 1-10 0V10z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\r\n}\r\n.card img:hover{\r\n    width:90%; height:100%;\r\n}\r\n.forms{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n}\r\n\r\n.alle .card:nth-of-type(3n+2){\r\n    background-color: #FFBCBC;\r\n}\r\n.alle .card:nth-of-type(3n+3){\r\n    background-color: #B5EAEA;\r\n}\r\n.card img{\r\n    height: 70%;\r\n    width: 80%;\r\n}\r\n.card .info{\r\n    width: 100%;\r\n    height: 50px;\r\n    background: rgba(00, 00, 00, .5);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}